programming liberated von neumann style functional style algebra programs conventional programming languages growing enormous stronger inherent defects basic level fat weak primitive word-at-a-time style programming inherited common ancestor-the von neumann computer close coupling semantics state transitions division programming world expressions world statements inability effectively powerful combining forms building programs existing lack mathematical properties reasoning programs alternative functional style programming founded combining forms creating programs functional programs deal structured data nonrepetitive nonrecursive hierarchically constructed arguments require complex machinery procedure declarations generally applicable combining forms high level programs build higher level style conventional languages functional style programming algebra programs variables range programs operations combining forms algebra transform programs solve equations unknowns programs transforms equations high school algebra transformations algebraic laws carried language programs written combining forms chosen programming power power algebraic laws general theorems algebra give detailed behavior termination conditions large classes programs class computing systems functional programming style programming language state transition rules unlike von neumann languages systems semantics loosely coupled states-only state transition occurs major computation cacm august 1978 backus functional programming algebra programs combining forms functional forms programming languages von neumann computers von neumann languages models computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition 4.20 4.29 5.20 5.24 5.26 ca780801 dh february 7 1979 313 pm 